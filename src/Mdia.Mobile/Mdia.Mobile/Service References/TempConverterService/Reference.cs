//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mdia.Mobile.TempConverterService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://www.w3schools.com/xml/", ConfigurationName="TempConverterService.TempConvertSoap")]
    public interface TempConvertSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://www.w3schools.com/xml/FahrenheitToCelsius", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginFahrenheitToCelsius(string Fahrenheit, System.AsyncCallback callback, object asyncState);
        
        string EndFahrenheitToCelsius(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="https://www.w3schools.com/xml/CelsiusToFahrenheit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginCelsiusToFahrenheit(string Celsius, System.AsyncCallback callback, object asyncState);
        
        string EndCelsiusToFahrenheit(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TempConvertSoapChannel : Mdia.Mobile.TempConverterService.TempConvertSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FahrenheitToCelsiusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FahrenheitToCelsiusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CelsiusToFahrenheitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CelsiusToFahrenheitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TempConvertSoapClient : System.ServiceModel.ClientBase<Mdia.Mobile.TempConverterService.TempConvertSoap>, Mdia.Mobile.TempConverterService.TempConvertSoap {
        
        private BeginOperationDelegate onBeginFahrenheitToCelsiusDelegate;
        
        private EndOperationDelegate onEndFahrenheitToCelsiusDelegate;
        
        private System.Threading.SendOrPostCallback onFahrenheitToCelsiusCompletedDelegate;
        
        private BeginOperationDelegate onBeginCelsiusToFahrenheitDelegate;
        
        private EndOperationDelegate onEndCelsiusToFahrenheitDelegate;
        
        private System.Threading.SendOrPostCallback onCelsiusToFahrenheitCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TempConvertSoapClient() : 
                base(TempConvertSoapClient.GetDefaultBinding(), TempConvertSoapClient.GetDefaultEndpointAddress()) {
        }
        
        public TempConvertSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(TempConvertSoapClient.GetBindingForEndpoint(endpointConfiguration), TempConvertSoapClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public TempConvertSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TempConvertSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public TempConvertSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TempConvertSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public TempConvertSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<FahrenheitToCelsiusCompletedEventArgs> FahrenheitToCelsiusCompleted;
        
        public event System.EventHandler<CelsiusToFahrenheitCompletedEventArgs> CelsiusToFahrenheitCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Mdia.Mobile.TempConverterService.TempConvertSoap.BeginFahrenheitToCelsius(string Fahrenheit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFahrenheitToCelsius(Fahrenheit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Mdia.Mobile.TempConverterService.TempConvertSoap.EndFahrenheitToCelsius(System.IAsyncResult result) {
            return base.Channel.EndFahrenheitToCelsius(result);
        }
        
        private System.IAsyncResult OnBeginFahrenheitToCelsius(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Fahrenheit = ((string)(inValues[0]));
            return ((Mdia.Mobile.TempConverterService.TempConvertSoap)(this)).BeginFahrenheitToCelsius(Fahrenheit, callback, asyncState);
        }
        
        private object[] OnEndFahrenheitToCelsius(System.IAsyncResult result) {
            string retVal = ((Mdia.Mobile.TempConverterService.TempConvertSoap)(this)).EndFahrenheitToCelsius(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFahrenheitToCelsiusCompleted(object state) {
            if ((this.FahrenheitToCelsiusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FahrenheitToCelsiusCompleted(this, new FahrenheitToCelsiusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FahrenheitToCelsiusAsync(string Fahrenheit) {
            this.FahrenheitToCelsiusAsync(Fahrenheit, null);
        }
        
        public void FahrenheitToCelsiusAsync(string Fahrenheit, object userState) {
            if ((this.onBeginFahrenheitToCelsiusDelegate == null)) {
                this.onBeginFahrenheitToCelsiusDelegate = new BeginOperationDelegate(this.OnBeginFahrenheitToCelsius);
            }
            if ((this.onEndFahrenheitToCelsiusDelegate == null)) {
                this.onEndFahrenheitToCelsiusDelegate = new EndOperationDelegate(this.OnEndFahrenheitToCelsius);
            }
            if ((this.onFahrenheitToCelsiusCompletedDelegate == null)) {
                this.onFahrenheitToCelsiusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFahrenheitToCelsiusCompleted);
            }
            base.InvokeAsync(this.onBeginFahrenheitToCelsiusDelegate, new object[] {
                        Fahrenheit}, this.onEndFahrenheitToCelsiusDelegate, this.onFahrenheitToCelsiusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Mdia.Mobile.TempConverterService.TempConvertSoap.BeginCelsiusToFahrenheit(string Celsius, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCelsiusToFahrenheit(Celsius, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Mdia.Mobile.TempConverterService.TempConvertSoap.EndCelsiusToFahrenheit(System.IAsyncResult result) {
            return base.Channel.EndCelsiusToFahrenheit(result);
        }
        
        private System.IAsyncResult OnBeginCelsiusToFahrenheit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Celsius = ((string)(inValues[0]));
            return ((Mdia.Mobile.TempConverterService.TempConvertSoap)(this)).BeginCelsiusToFahrenheit(Celsius, callback, asyncState);
        }
        
        private object[] OnEndCelsiusToFahrenheit(System.IAsyncResult result) {
            string retVal = ((Mdia.Mobile.TempConverterService.TempConvertSoap)(this)).EndCelsiusToFahrenheit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCelsiusToFahrenheitCompleted(object state) {
            if ((this.CelsiusToFahrenheitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CelsiusToFahrenheitCompleted(this, new CelsiusToFahrenheitCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CelsiusToFahrenheitAsync(string Celsius) {
            this.CelsiusToFahrenheitAsync(Celsius, null);
        }
        
        public void CelsiusToFahrenheitAsync(string Celsius, object userState) {
            if ((this.onBeginCelsiusToFahrenheitDelegate == null)) {
                this.onBeginCelsiusToFahrenheitDelegate = new BeginOperationDelegate(this.OnBeginCelsiusToFahrenheit);
            }
            if ((this.onEndCelsiusToFahrenheitDelegate == null)) {
                this.onEndCelsiusToFahrenheitDelegate = new EndOperationDelegate(this.OnEndCelsiusToFahrenheit);
            }
            if ((this.onCelsiusToFahrenheitCompletedDelegate == null)) {
                this.onCelsiusToFahrenheitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCelsiusToFahrenheitCompleted);
            }
            base.InvokeAsync(this.onBeginCelsiusToFahrenheitDelegate, new object[] {
                        Celsius}, this.onEndCelsiusToFahrenheitDelegate, this.onCelsiusToFahrenheitCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Mdia.Mobile.TempConverterService.TempConvertSoap CreateChannel() {
            return new TempConvertSoapClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.TempConvertSoap)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.TempConvertSoap)) {
                return new System.ServiceModel.EndpointAddress("http://www.w3schools.com/xml/TempConvert.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return TempConvertSoapClient.GetBindingForEndpoint(EndpointConfiguration.TempConvertSoap);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return TempConvertSoapClient.GetEndpointAddress(EndpointConfiguration.TempConvertSoap);
        }
        
        private class TempConvertSoapClientChannel : ChannelBase<Mdia.Mobile.TempConverterService.TempConvertSoap>, Mdia.Mobile.TempConverterService.TempConvertSoap {
            
            public TempConvertSoapClientChannel(System.ServiceModel.ClientBase<Mdia.Mobile.TempConverterService.TempConvertSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginFahrenheitToCelsius(string Fahrenheit, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = Fahrenheit;
                System.IAsyncResult _result = base.BeginInvoke("FahrenheitToCelsius", _args, callback, asyncState);
                return _result;
            }
            
            public string EndFahrenheitToCelsius(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("FahrenheitToCelsius", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCelsiusToFahrenheit(string Celsius, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = Celsius;
                System.IAsyncResult _result = base.BeginInvoke("CelsiusToFahrenheit", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCelsiusToFahrenheit(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CelsiusToFahrenheit", _args, result)));
                return _result;
            }
        }
        
        public enum EndpointConfiguration {
            
            TempConvertSoap,
        }
    }
}
